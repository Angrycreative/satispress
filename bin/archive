#!/usr/bin/env node

const archiver = require( 'archiver' );
const fs = require( 'fs' );
const makepot = require( 'node-wp-i18n' ).makepot;
const path = require( 'path' );
const spawnProcess = require( 'child_process' ).spawn;

const argv = require( 'minimist' )( process.argv.slice( 2 ), {
	string: [ 'version' ]
} );

const pluginSlug = 'satispress';
const pluginFile = path.join( __dirname, `../${ pluginSlug }.php` );
const packageJson = path.join( __dirname, '../package.json' );
let version = argv.version;

if ( ! version ) {
	const contents = fs.readFileSync( pluginFile, 'utf8' );
	version = contents.match( /Version:[\s]+(.+)/ )[1];
}

replaceInFile( pluginFile, /(Version:[\s]+).+/, `\$1${ version }` )
	.then( () => replaceInFile( pluginFile, /VERSION = '.+'/, `VERSION = '${ version }'` ) )
	.then( () => replaceInFile( packageJson, /"version": "[^"]+"/, `"version": "${ version }"` ))
	.then( () => spawn( 'composer', [ 'install', '--no-dev', '--prefer-dist' ] ) )
	.then( () => spawn( 'composer', [ 'dump-autoload', '--no-dev', '--optimize' ] ) )
	.then( () => makepot( { poedit: true } ) )
	.then( () => compress( pluginSlug, version, ( archive ) => {
		archive.file( `satispress.php` );
		archive.file( 'README.md' );
		archive.directory( 'assets/' );
		archive.directory( 'languages/' );
		archive.directory( 'src/' );
		archive.directory( 'views/' );

		archive.file( 'vendor/autoload.php' );
		archive.directory( 'vendor/cedaro/wp-plugin/src' );
		archive.glob( 'vendor/composer/*.php' );
		archive.directory( 'vendor/composer/semver/src' );
		archive.directory( 'vendor/pimple/pimple/src' );
		archive.directory( 'vendor/psr/container/src' );
	} ) );

function compress( pluginSlug, version, fn ) {
	return new Promise( ( resolve, reject ) => {
		const dist = path.join( __dirname, '../dist' );

		try {
			fs.mkdirSync( dist );
		} catch ( error ) {}

		const archive = archiver.create( 'zip' );
		const output = fs.createWriteStream( path.join( dist, `${ pluginSlug }-${ version }.zip` ) );

		output.on( 'close', () => {
			console.log( `Created dist/${ pluginSlug }-${ version }.zip` );
			console.log( `Total bytes: ${ archive.pointer() }` );
			resolve();
		} );

		output.on( 'error', ( error ) => reject( error ) );

		archive.pipe( output );
		fn.call( null, archive );
		archive.finalize();
	} );
}

function replaceInFile( file, pattern, replace ) {
	return new Promise( ( resolve, reject ) => {
		let contents = fs.readFileSync( file, 'utf8' );
		contents = contents.replace( pattern, replace );
		fs.writeFileSync( file, contents );
		resolve();
	} );
}

function spawn( file, args ) {
	return new Promise( ( resolve, reject ) => {
		const child = spawnProcess( file, args, { stdio: 'inherit' } );
		child.on( 'error', reject );
		child.on( 'close', resolve );
	} );
}
